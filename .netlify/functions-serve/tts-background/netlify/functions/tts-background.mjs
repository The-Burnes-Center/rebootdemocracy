
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/tts-background.mjs
import OpenAI from "openai";
import FormData from "form-data";
import fetch from "node-fetch";
import { JSDOM } from "jsdom";
var DIRECTUS_URL = process.env.DIRECTUS_URL;
var DIRECTUS_AUTH_TOKEN = process.env.DIRECTUS_AUTH_TOKEN;
var openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});
async function directusFetch(endpoint, method = "GET", body = null) {
  const url = `${DIRECTUS_URL}${endpoint}`;
  const headers = {
    "Authorization": `Bearer ${DIRECTUS_AUTH_TOKEN}`,
    "Content-Type": "application/json"
  };
  const options = {
    method,
    headers
  };
  if (body) {
    options.body = JSON.stringify(body);
  }
  const response = await fetch(url, options);
  if (!response.ok) {
    const errorDetails = await response.text();
    throw new Error(`Directus API request failed: ${response.status} - ${errorDetails}`);
  }
  return response.json();
}
async function readDirectusItem(collection, itemId) {
  const endpoint = `/items/${collection}/${itemId}?fields=*.*,authors.team_id.*`;
  return directusFetch(endpoint);
}
async function runProcess(bodyres) {
  try {
    let getFullName = function(author) {
      return `${author.team_id.First_Name} ${author.team_id.Last_Name}`;
    }, joinAuthorNames = function(authors2) {
      if (authors2.length === 1) {
        return getFullName(authors2[0]);
      } else {
        return authors2.map(getFullName).join(", ").replace(/, (?=[^,]+$)/, " and ");
      }
    };
    const article = await readDirectusItem(bodyres.collection, bodyres.id);
    const { content, slug, title, authors, audio_version } = article.data;
    let textContent = `${title} 
 ${joinAuthorNames(authors).length > 0 ? "\nby" : ""} ${joinAuthorNames(authors)} 
${extractTextFromHTML(content)}`;
    let allSpeechBuffers = [];
    if (textContent.length > 4096) {
      const chunks = splitText(textContent, 4096);
      for (const chunk of chunks) {
        console.log(chunk.length);
        const buffer = await generateSpeech(chunk);
        allSpeechBuffers.push(buffer);
      }
    } else {
      const buffer = await generateSpeech(textContent);
      allSpeechBuffers.push(buffer);
    }
    const combinedBuffer = Buffer.concat(allSpeechBuffers);
    const uploadResult = await uploadBuffer(combinedBuffer, slug, bodyres.collection, bodyres.id, audio_version);
    console.log(uploadResult);
    const updateResult = await updateArticleWithAudioId(bodyres.collection, bodyres.id, uploadResult.data.id);
    return updateResult;
  } catch (error) {
    console.error("Error in processing article and generating speech:", error);
  }
}
async function generateSpeech(text) {
  const response = await openai.audio.speech.create({
    model: "tts-1-hd",
    voice: "shimmer",
    input: text
  });
  if (response.status !== 200) {
    throw new Error("Failed to generate speech from OpenAI.");
  }
  const chunks = [];
  for await (const chunk of response.body) {
    chunks.push(chunk instanceof Buffer ? chunk : Buffer.from(chunk));
  }
  return Buffer.concat(chunks);
}
async function uploadBuffer(buffer, slug, audio_version) {
  const form = new FormData();
  form.append("file", buffer, {
    filename: slug + ".mp3",
    contentType: "audio/mpeg",
    knownLength: buffer.length
  });
  const directusFileEndpoint = DIRECTUS_URL + "/files" + (audio_version ? "/" + audio_version.id : "");
  const headers = {
    "Authorization": "Bearer " + DIRECTUS_AUTH_TOKEN
    // replace with an actual token
  };
  const finalHeaders = { ...form.getHeaders(), ...headers };
  const fileResponse = await fetch(directusFileEndpoint, {
    method: audio_version ? "PATCH" : "POST",
    body: form,
    headers: finalHeaders
  });
  if (!fileResponse.ok) {
    const errorBody = await fileResponse.text();
    throw new Error(`Error uploading file: ${errorBody}`);
  }
  const directusResponse = await fileResponse.json();
  return directusResponse;
}
async function updateArticleWithAudioId(collection, itemId, audioFileId) {
  const directusItemEndpoint = DIRECTUS_URL + "/items/" + collection + "/" + itemId;
  const updateData = {
    audio_version: audioFileId
  };
  const headers = {
    "Content-Type": "application/json",
    "Authorization": "Bearer " + DIRECTUS_AUTH_TOKEN
  };
  const response = await fetch(directusItemEndpoint, {
    method: "PATCH",
    body: JSON.stringify(updateData),
    headers
  });
  if (!response.ok) {
    const errorBody = await response.text();
    throw new Error(`Error updating item: ${errorBody}`);
  }
  const jsonResponse = await response.json();
  return jsonResponse;
}
var tts_background_default = async (req, context) => {
  const bodyres = await req.json();
  console.log(bodyres);
  await runProcess(bodyres);
};
function extractTextFromHTML(html) {
  const dom = new JSDOM(html);
  const document = dom.window.document;
  function walkNode(node, text = "") {
    if (node.nodeType === 1 && ["SCRIPT", "STYLE", "IMG", "FIGCAPTION"].includes(node.tagName)) {
      return text;
    }
    if (node.nodeType === 3) {
      text += node.textContent;
    } else if (node.nodeType === 1) {
      if (["P", "BR", "DIV", "LI", "H1", "H2", "H3", "H4", "H5", "H6"].includes(node.tagName)) {
        text += node.textContent + "\n";
      } else {
        for (const childNode of node.childNodes) {
          text = walkNode(childNode, text);
        }
      }
    }
    return text;
  }
  return walkNode(document.body);
}
function splitText(text, maxLength) {
  const sentenceEndings = [".", "!", "?"];
  let chunks = [];
  let startIndex = 0;
  while (startIndex < text.length) {
    let endIndex = Math.min(startIndex + maxLength, text.length);
    let lastBreakIndex = startIndex;
    for (let i = startIndex; i < endIndex; i++) {
      if (text[i] === "\n" || sentenceEndings.includes(text[i]) && text[i + 1] && text[i + 1] === " ") {
        lastBreakIndex = i + 1;
      }
    }
    if (lastBreakIndex > startIndex) {
      chunks.push(text.substring(startIndex, lastBreakIndex));
      startIndex = lastBreakIndex;
    } else {
      let nextBreakIndex = text.indexOf("\n", endIndex) || text.length;
      for (const ending of sentenceEndings) {
        let nextSentenceIndex = text.indexOf(ending + " ", endIndex);
        if (nextSentenceIndex !== -1 && (nextSentenceIndex < nextBreakIndex || nextBreakIndex === -1)) {
          nextBreakIndex = nextSentenceIndex + 1;
        }
      }
      nextBreakIndex = nextBreakIndex !== -1 ? nextBreakIndex : text.length;
      chunks.push(text.substring(startIndex, nextBreakIndex));
      startIndex = nextBreakIndex;
    }
  }
  return chunks;
}
export {
  tts_background_default as default
};
//# sourceMappingURL=data:application/json;base64,
