
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/openai-create-file-asssitant.mjs
import OpenAI from "openai";
import fs from "fs";
var DIRECTUS_URL = process.env.DIRECTUS_URL;
var DIRECTUS_AUTH_TOKEN = process.env.DIRECTUS_AUTH_TOKEN;
var openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});
async function directusFetch(endpoint, method = "GET", body = null) {
  const url = `${DIRECTUS_URL}${endpoint}`;
  const headers = {
    "Authorization": `Bearer ${DIRECTUS_AUTH_TOKEN}`,
    "Content-Type": "application/json"
  };
  const options = {
    method,
    headers
  };
  if (body) {
    options.body = JSON.stringify(body);
  }
  const response = await fetch(url, options);
  if (!response.ok) {
    const errorDetails = await response.text();
    throw new Error(`Directus API request failed: ${response.status} - ${errorDetails}`);
  }
  return response.json();
}
async function readDirectusItem(collection, itemId) {
  const endpoint = `/items/${collection}/${itemId}?fields=*.*,authors.team_id.*`;
  return directusFetch(endpoint);
}
async function main(bodyres) {
  const article = await readDirectusItem(bodyres.collection, bodyres.id);
  const { slug } = article.data;
  if (bodyres.collection == "blog")
    article.data["link"] = "https://blog.thegovlab.org/" + slug;
  if (bodyres.collection == "reboot_democracy_blog")
    article.data["link"] = "https://rebootdemocracy.ai/blog/" + slug;
  console.log(article.data);
  fs.writeFileSync(slug + ".json", JSON.stringify(article.data));
  try {
    const file = await openai.files.create({
      file: fs.createReadStream(slug + ".json"),
      purpose: "assistants"
    });
    const assistantId = process.env.REBOOT_DEMOCRACY_ASSISTANT_ID;
    const myAssistantFile = await openai.beta.assistants.files.create(
      assistantId,
      { file_id: file.id }
    );
    console.log("Assistant file created:", myAssistantFile);
  } catch (error) {
    console.error("Error:", error);
  }
}
var openai_create_file_asssitant_default = async (req, context) => {
  const bodyres = await req.json();
  await main(bodyres);
};
export {
  openai_create_file_asssitant_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibmV0bGlmeS9mdW5jdGlvbnMvb3BlbmFpLWNyZWF0ZS1maWxlLWFzc3NpdGFudC5tanMiXSwKICAic291cmNlc0NvbnRlbnQiOiBbIi8vIGNyZWF0ZSBhbmQgYWRkaW5nIHRvIGFzc2lzdGFudCBcbi8vIFVwbG9hZCBhIGZpbGUgd2l0aCBhbiBcImFzc2lzdGFudHNcIiBwdXJwb3NlXG5cbmltcG9ydCBPcGVuQUkgZnJvbSBcIm9wZW5haVwiO1xuaW1wb3J0IGZzIGZyb20gXCJmc1wiO1xuXG5cbmNvbnN0IERJUkVDVFVTX1VSTCA9IHByb2Nlc3MuZW52LkRJUkVDVFVTX1VSTFxuY29uc3QgRElSRUNUVVNfQVVUSF9UT0tFTiA9IHByb2Nlc3MuZW52LkRJUkVDVFVTX0FVVEhfVE9LRU5cblxuY29uc3Qgb3BlbmFpID0gbmV3IE9wZW5BSSh7XG4gIGFwaUtleTogcHJvY2Vzcy5lbnYuT1BFTkFJX0FQSV9LRVksXG59KTtcblxuLy8gRnVuY3Rpb24gdG8gbWFrZSByZXF1ZXN0cyB0byBEaXJlY3R1cyBBUElcbmFzeW5jIGZ1bmN0aW9uIGRpcmVjdHVzRmV0Y2goZW5kcG9pbnQsIG1ldGhvZCA9ICdHRVQnLCBib2R5ID0gbnVsbCkge1xuICBjb25zdCB1cmwgPSBgJHtESVJFQ1RVU19VUkx9JHtlbmRwb2ludH1gO1xuICBjb25zdCBoZWFkZXJzID0ge1xuICAgICdBdXRob3JpemF0aW9uJzogYEJlYXJlciAke0RJUkVDVFVTX0FVVEhfVE9LRU59YCxcbiAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuICB9O1xuXG4gIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgbWV0aG9kLFxuICAgIGhlYWRlcnMsXG4gIH07XG5cbiAgaWYgKGJvZHkpIHtcbiAgICBvcHRpb25zLmJvZHkgPSBKU09OLnN0cmluZ2lmeShib2R5KTtcbiAgfVxuXG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2godXJsLCBvcHRpb25zKTtcblxuICBpZiAoIXJlc3BvbnNlLm9rKSB7XG4gICAgY29uc3QgZXJyb3JEZXRhaWxzID0gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICAgIHRocm93IG5ldyBFcnJvcihgRGlyZWN0dXMgQVBJIHJlcXVlc3QgZmFpbGVkOiAke3Jlc3BvbnNlLnN0YXR1c30gLSAke2Vycm9yRGV0YWlsc31gKTtcbiAgfVxuXG4gIHJldHVybiByZXNwb25zZS5qc29uKCk7XG59XG5cbi8vIEZ1bmN0aW9uIHRvIHJlYWQgYW4gaXRlbSBmcm9tIGEgY29sbGVjdGlvbiBieSBJRFxuYXN5bmMgZnVuY3Rpb24gcmVhZERpcmVjdHVzSXRlbShjb2xsZWN0aW9uLCBpdGVtSWQpIHtcbiAgICBjb25zdCBlbmRwb2ludCA9IGAvaXRlbXMvJHtjb2xsZWN0aW9ufS8ke2l0ZW1JZH0/ZmllbGRzPSouKixhdXRob3JzLnRlYW1faWQuKmA7XG4gICAgcmV0dXJuIGRpcmVjdHVzRmV0Y2goZW5kcG9pbnQpO1xuICB9XG5cblxuYXN5bmMgZnVuY3Rpb24gbWFpbihib2R5cmVzKSB7XG4gIC8vIFdyaXRlIEpTT04gdG8gYSBmaWxlXG5cbiAgY29uc3QgYXJ0aWNsZSA9IGF3YWl0IHJlYWREaXJlY3R1c0l0ZW0oYm9keXJlcy5jb2xsZWN0aW9uLCBib2R5cmVzLmlkKTtcbiAgY29uc3QgeyBzbHVnIH0gPSBhcnRpY2xlLmRhdGE7XG4gIFxuICBpZihib2R5cmVzLmNvbGxlY3Rpb24gPT0gJ2Jsb2cnKSBhcnRpY2xlLmRhdGFbJ2xpbmsnXT0gXCJodHRwczovL2Jsb2cudGhlZ292bGFiLm9yZy9cIitzbHVnO1xuICBpZihib2R5cmVzLmNvbGxlY3Rpb24gPT0gJ3JlYm9vdF9kZW1vY3JhY3lfYmxvZycpICBhcnRpY2xlLmRhdGFbJ2xpbmsnXT0gXCJodHRwczovL3JlYm9vdGRlbW9jcmFjeS5haS9ibG9nL1wiK3NsdWc7XG5cbiAgY29uc29sZS5sb2coYXJ0aWNsZS5kYXRhKTtcbiAgZnMud3JpdGVGaWxlU3luYyhzbHVnKycuanNvbicsIEpTT04uc3RyaW5naWZ5KGFydGljbGUuZGF0YSkpO1xuXG4gIHRyeSB7XG4gICAgICAvLyBVcGxvYWQgdGhlIGZpbGVcbiAgICAgIGNvbnN0IGZpbGUgPSBhd2FpdCBvcGVuYWkuZmlsZXMuY3JlYXRlKHtcbiAgICAgICAgICBmaWxlOiBmcy5jcmVhdGVSZWFkU3RyZWFtKHNsdWcrJy5qc29uJyksXG4gICAgICAgICAgcHVycG9zZTogXCJhc3Npc3RhbnRzXCIsXG4gICAgICB9KTtcblxuICAgICAgLy8gQXR0YWNoIHRoZSBmaWxlIHRvIHRoZSBhc3Npc3RhbnRcbiAgICAgIGNvbnN0IGFzc2lzdGFudElkID0gcHJvY2Vzcy5lbnYuUkVCT09UX0RFTU9DUkFDWV9BU1NJU1RBTlRfSUQ7IC8vIFJlcGxhY2Ugd2l0aCB5b3VyIGFjdHVhbCBhc3Npc3RhbnQgSURcbiAgICAgIGNvbnN0IG15QXNzaXN0YW50RmlsZSA9IGF3YWl0IG9wZW5haS5iZXRhLmFzc2lzdGFudHMuZmlsZXMuY3JlYXRlKFxuICAgICAgICAgIGFzc2lzdGFudElkLFxuICAgICAgICAgIHsgZmlsZV9pZDogZmlsZS5pZCB9XG4gICAgICApO1xuXG4gICAgICBjb25zb2xlLmxvZygnQXNzaXN0YW50IGZpbGUgY3JlYXRlZDonLCBteUFzc2lzdGFudEZpbGUpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3I6JywgZXJyb3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzeW5jIChyZXEsIGNvbnRleHQpID0+IHtcbiAgICBjb25zdCBib2R5cmVzID0gYXdhaXQgcmVxLmpzb24oKTtcbiAgICBhd2FpdCBtYWluKGJvZHlyZXMpO1xuICB9O1xuICBcblxuXG4iXSwKICAibWFwcGluZ3MiOiAiOzs7Ozs7Ozs7O0FBR0EsT0FBTyxZQUFZO0FBQ25CLE9BQU8sUUFBUTtBQUdmLElBQU0sZUFBZSxRQUFRLElBQUk7QUFDakMsSUFBTSxzQkFBc0IsUUFBUSxJQUFJO0FBRXhDLElBQU0sU0FBUyxJQUFJLE9BQU87QUFBQSxFQUN4QixRQUFRLFFBQVEsSUFBSTtBQUN0QixDQUFDO0FBR0QsZUFBZSxjQUFjLFVBQVUsU0FBUyxPQUFPLE9BQU8sTUFBTTtBQUNsRSxRQUFNLE1BQU0sR0FBRyxZQUFZLEdBQUcsUUFBUTtBQUN0QyxRQUFNLFVBQVU7QUFBQSxJQUNkLGlCQUFpQixVQUFVLG1CQUFtQjtBQUFBLElBQzlDLGdCQUFnQjtBQUFBLEVBQ2xCO0FBRUEsUUFBTSxVQUFVO0FBQUEsSUFDZDtBQUFBLElBQ0E7QUFBQSxFQUNGO0FBRUEsTUFBSSxNQUFNO0FBQ1IsWUFBUSxPQUFPLEtBQUssVUFBVSxJQUFJO0FBQUEsRUFDcEM7QUFFQSxRQUFNLFdBQVcsTUFBTSxNQUFNLEtBQUssT0FBTztBQUV6QyxNQUFJLENBQUMsU0FBUyxJQUFJO0FBQ2hCLFVBQU0sZUFBZSxNQUFNLFNBQVMsS0FBSztBQUN6QyxVQUFNLElBQUksTUFBTSxnQ0FBZ0MsU0FBUyxNQUFNLE1BQU0sWUFBWSxFQUFFO0FBQUEsRUFDckY7QUFFQSxTQUFPLFNBQVMsS0FBSztBQUN2QjtBQUdBLGVBQWUsaUJBQWlCLFlBQVksUUFBUTtBQUNoRCxRQUFNLFdBQVcsVUFBVSxVQUFVLElBQUksTUFBTTtBQUMvQyxTQUFPLGNBQWMsUUFBUTtBQUMvQjtBQUdGLGVBQWUsS0FBSyxTQUFTO0FBRzNCLFFBQU0sVUFBVSxNQUFNLGlCQUFpQixRQUFRLFlBQVksUUFBUSxFQUFFO0FBQ3JFLFFBQU0sRUFBRSxLQUFLLElBQUksUUFBUTtBQUV6QixNQUFHLFFBQVEsY0FBYztBQUFRLFlBQVEsS0FBSyxNQUFNLElBQUcsZ0NBQThCO0FBQ3JGLE1BQUcsUUFBUSxjQUFjO0FBQTBCLFlBQVEsS0FBSyxNQUFNLElBQUcscUNBQW1DO0FBRTVHLFVBQVEsSUFBSSxRQUFRLElBQUk7QUFDeEIsS0FBRyxjQUFjLE9BQUssU0FBUyxLQUFLLFVBQVUsUUFBUSxJQUFJLENBQUM7QUFFM0QsTUFBSTtBQUVBLFVBQU0sT0FBTyxNQUFNLE9BQU8sTUFBTSxPQUFPO0FBQUEsTUFDbkMsTUFBTSxHQUFHLGlCQUFpQixPQUFLLE9BQU87QUFBQSxNQUN0QyxTQUFTO0FBQUEsSUFDYixDQUFDO0FBR0QsVUFBTSxjQUFjLFFBQVEsSUFBSTtBQUNoQyxVQUFNLGtCQUFrQixNQUFNLE9BQU8sS0FBSyxXQUFXLE1BQU07QUFBQSxNQUN2RDtBQUFBLE1BQ0EsRUFBRSxTQUFTLEtBQUssR0FBRztBQUFBLElBQ3ZCO0FBRUEsWUFBUSxJQUFJLDJCQUEyQixlQUFlO0FBQUEsRUFDMUQsU0FBUyxPQUFPO0FBQ1osWUFBUSxNQUFNLFVBQVUsS0FBSztBQUFBLEVBQ2pDO0FBQ0Y7QUFFQSxJQUFPLHVDQUFRLE9BQU8sS0FBSyxZQUFZO0FBQ25DLFFBQU0sVUFBVSxNQUFNLElBQUksS0FBSztBQUMvQixRQUFNLEtBQUssT0FBTztBQUNwQjsiLAogICJuYW1lcyI6IFtdCn0K
