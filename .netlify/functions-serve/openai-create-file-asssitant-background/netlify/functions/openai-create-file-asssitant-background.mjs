
import {createRequire as ___nfyCreateRequire} from "module";
import {fileURLToPath as ___nfyFileURLToPath} from "url";
import {dirname as ___nfyPathDirname} from "path";
let __filename=___nfyFileURLToPath(import.meta.url);
let __dirname=___nfyPathDirname(___nfyFileURLToPath(import.meta.url));
let require=___nfyCreateRequire(import.meta.url);


// netlify/functions/openai-create-file-asssitant-background.mjs
import OpenAI from "openai";
import fs from "fs";
var DIRECTUS_URL = process.env.DIRECTUS_URL;
var DIRECTUS_AUTH_TOKEN = process.env.DIRECTUS_AUTH_TOKEN;
var openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});
async function directusFetch(endpoint, method = "GET", body = null) {
  const url = `${DIRECTUS_URL}${endpoint}`;
  const headers = {
    "Authorization": `Bearer ${DIRECTUS_AUTH_TOKEN}`,
    "Content-Type": "application/json"
  };
  const options = {
    method,
    headers
  };
  if (body) {
    options.body = JSON.stringify(body);
  }
  const response = await fetch(url, options);
  if (!response.ok) {
    const errorDetails = await response.text();
    throw new Error(`Directus API request failed: ${response.status} - ${errorDetails}`);
  }
  return response.json();
}
async function readDirectusItem(collection, itemId) {
  const endpoint = `/items/${collection}/${itemId}?fields=*.*,authors.team_id.*`;
  return directusFetch(endpoint);
}
async function main(bodyres) {
  const article = await readDirectusItem(bodyres.collection, bodyres.id);
  const { slug } = article.data;
  if (bodyres.collection == "blog")
    article.data["link"] = "https://blog.thegovlab.org/" + slug;
  if (bodyres.collection == "reboot_democracy_blog")
    article.data["link"] = "https://rebootdemocracy.ai/blog/" + slug;
  console.log(article.data);
  fs.writeFileSync(slug + ".json", JSON.stringify(article.data));
  try {
    const file = await openai.files.create({
      file: fs.createReadStream(slug + ".json"),
      purpose: "assistants"
    });
    const assistantId = process.env.REBOOT_DEMOCRACY_ASSISTANT_ID;
    const myAssistantFile = await openai.beta.assistants.files.create(
      assistantId,
      { file_id: file.id }
    );
    console.log("Assistant file created:", myAssistantFile);
  } catch (error) {
    console.error("Error:", error);
  }
}
var openai_create_file_asssitant_background_default = async (req, context) => {
  const bodyres = await req.json();
  await main(bodyres);
};
export {
  openai_create_file_asssitant_background_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibmV0bGlmeS9mdW5jdGlvbnMvb3BlbmFpLWNyZWF0ZS1maWxlLWFzc3NpdGFudC1iYWNrZ3JvdW5kLm1qcyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiLy8gY3JlYXRlIGFuZCBhZGRpbmcgdG8gYXNzaXN0YW50IFxuLy8gVXBsb2FkIGEgZmlsZSB3aXRoIGFuIFwiYXNzaXN0YW50c1wiIHB1cnBvc2VcblxuaW1wb3J0IE9wZW5BSSBmcm9tIFwib3BlbmFpXCI7XG5pbXBvcnQgZnMgZnJvbSBcImZzXCI7XG5cblxuY29uc3QgRElSRUNUVVNfVVJMID0gcHJvY2Vzcy5lbnYuRElSRUNUVVNfVVJMXG5jb25zdCBESVJFQ1RVU19BVVRIX1RPS0VOID0gcHJvY2Vzcy5lbnYuRElSRUNUVVNfQVVUSF9UT0tFTlxuXG5jb25zdCBvcGVuYWkgPSBuZXcgT3BlbkFJKHtcbiAgYXBpS2V5OiBwcm9jZXNzLmVudi5PUEVOQUlfQVBJX0tFWSxcbn0pO1xuXG4vLyBGdW5jdGlvbiB0byBtYWtlIHJlcXVlc3RzIHRvIERpcmVjdHVzIEFQSVxuYXN5bmMgZnVuY3Rpb24gZGlyZWN0dXNGZXRjaChlbmRwb2ludCwgbWV0aG9kID0gJ0dFVCcsIGJvZHkgPSBudWxsKSB7XG4gIGNvbnN0IHVybCA9IGAke0RJUkVDVFVTX1VSTH0ke2VuZHBvaW50fWA7XG4gIGNvbnN0IGhlYWRlcnMgPSB7XG4gICAgJ0F1dGhvcml6YXRpb24nOiBgQmVhcmVyICR7RElSRUNUVVNfQVVUSF9UT0tFTn1gLFxuICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gIH07XG5cbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBtZXRob2QsXG4gICAgaGVhZGVycyxcbiAgfTtcblxuICBpZiAoYm9keSkge1xuICAgIG9wdGlvbnMuYm9keSA9IEpTT04uc3RyaW5naWZ5KGJvZHkpO1xuICB9XG5cbiAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaCh1cmwsIG9wdGlvbnMpO1xuXG4gIGlmICghcmVzcG9uc2Uub2spIHtcbiAgICBjb25zdCBlcnJvckRldGFpbHMgPSBhd2FpdCByZXNwb25zZS50ZXh0KCk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBEaXJlY3R1cyBBUEkgcmVxdWVzdCBmYWlsZWQ6ICR7cmVzcG9uc2Uuc3RhdHVzfSAtICR7ZXJyb3JEZXRhaWxzfWApO1xuICB9XG5cbiAgcmV0dXJuIHJlc3BvbnNlLmpzb24oKTtcbn1cblxuLy8gRnVuY3Rpb24gdG8gcmVhZCBhbiBpdGVtIGZyb20gYSBjb2xsZWN0aW9uIGJ5IElEXG5hc3luYyBmdW5jdGlvbiByZWFkRGlyZWN0dXNJdGVtKGNvbGxlY3Rpb24sIGl0ZW1JZCkge1xuICAgIGNvbnN0IGVuZHBvaW50ID0gYC9pdGVtcy8ke2NvbGxlY3Rpb259LyR7aXRlbUlkfT9maWVsZHM9Ki4qLGF1dGhvcnMudGVhbV9pZC4qYDtcbiAgICByZXR1cm4gZGlyZWN0dXNGZXRjaChlbmRwb2ludCk7XG4gIH1cblxuXG5hc3luYyBmdW5jdGlvbiBtYWluKGJvZHlyZXMpIHtcbiAgLy8gV3JpdGUgSlNPTiB0byBhIGZpbGVcblxuICBjb25zdCBhcnRpY2xlID0gYXdhaXQgcmVhZERpcmVjdHVzSXRlbShib2R5cmVzLmNvbGxlY3Rpb24sIGJvZHlyZXMuaWQpO1xuICBjb25zdCB7IHNsdWcgfSA9IGFydGljbGUuZGF0YTtcbiAgXG4gIGlmKGJvZHlyZXMuY29sbGVjdGlvbiA9PSAnYmxvZycpIGFydGljbGUuZGF0YVsnbGluayddPSBcImh0dHBzOi8vYmxvZy50aGVnb3ZsYWIub3JnL1wiK3NsdWc7XG4gIGlmKGJvZHlyZXMuY29sbGVjdGlvbiA9PSAncmVib290X2RlbW9jcmFjeV9ibG9nJykgIGFydGljbGUuZGF0YVsnbGluayddPSBcImh0dHBzOi8vcmVib290ZGVtb2NyYWN5LmFpL2Jsb2cvXCIrc2x1ZztcblxuICBjb25zb2xlLmxvZyhhcnRpY2xlLmRhdGEpO1xuICBmcy53cml0ZUZpbGVTeW5jKHNsdWcrJy5qc29uJywgSlNPTi5zdHJpbmdpZnkoYXJ0aWNsZS5kYXRhKSk7XG5cbiAgdHJ5IHtcbiAgICAgIC8vIFVwbG9hZCB0aGUgZmlsZVxuICAgICAgY29uc3QgZmlsZSA9IGF3YWl0IG9wZW5haS5maWxlcy5jcmVhdGUoe1xuICAgICAgICAgIGZpbGU6IGZzLmNyZWF0ZVJlYWRTdHJlYW0oc2x1ZysnLmpzb24nKSxcbiAgICAgICAgICBwdXJwb3NlOiBcImFzc2lzdGFudHNcIixcbiAgICAgIH0pO1xuXG4gICAgICAvLyBBdHRhY2ggdGhlIGZpbGUgdG8gdGhlIGFzc2lzdGFudFxuICAgICAgY29uc3QgYXNzaXN0YW50SWQgPSBwcm9jZXNzLmVudi5SRUJPT1RfREVNT0NSQUNZX0FTU0lTVEFOVF9JRDsgLy8gUmVwbGFjZSB3aXRoIHlvdXIgYWN0dWFsIGFzc2lzdGFudCBJRFxuICAgICAgY29uc3QgbXlBc3Npc3RhbnRGaWxlID0gYXdhaXQgb3BlbmFpLmJldGEuYXNzaXN0YW50cy5maWxlcy5jcmVhdGUoXG4gICAgICAgICAgYXNzaXN0YW50SWQsXG4gICAgICAgICAgeyBmaWxlX2lkOiBmaWxlLmlkIH1cbiAgICAgICk7XG5cbiAgICAgIGNvbnNvbGUubG9nKCdBc3Npc3RhbnQgZmlsZSBjcmVhdGVkOicsIG15QXNzaXN0YW50RmlsZSk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zb2xlLmVycm9yKCdFcnJvcjonLCBlcnJvcik7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXN5bmMgKHJlcSwgY29udGV4dCkgPT4ge1xuICAgIGNvbnN0IGJvZHlyZXMgPSBhd2FpdCByZXEuanNvbigpO1xuICAgIGF3YWl0IG1haW4oYm9keXJlcyk7XG4gIH07XG4gIFxuXG5cbiJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7QUFHQSxPQUFPLFlBQVk7QUFDbkIsT0FBTyxRQUFRO0FBR2YsSUFBTSxlQUFlLFFBQVEsSUFBSTtBQUNqQyxJQUFNLHNCQUFzQixRQUFRLElBQUk7QUFFeEMsSUFBTSxTQUFTLElBQUksT0FBTztBQUFBLEVBQ3hCLFFBQVEsUUFBUSxJQUFJO0FBQ3RCLENBQUM7QUFHRCxlQUFlLGNBQWMsVUFBVSxTQUFTLE9BQU8sT0FBTyxNQUFNO0FBQ2xFLFFBQU0sTUFBTSxHQUFHLFlBQVksR0FBRyxRQUFRO0FBQ3RDLFFBQU0sVUFBVTtBQUFBLElBQ2QsaUJBQWlCLFVBQVUsbUJBQW1CO0FBQUEsSUFDOUMsZ0JBQWdCO0FBQUEsRUFDbEI7QUFFQSxRQUFNLFVBQVU7QUFBQSxJQUNkO0FBQUEsSUFDQTtBQUFBLEVBQ0Y7QUFFQSxNQUFJLE1BQU07QUFDUixZQUFRLE9BQU8sS0FBSyxVQUFVLElBQUk7QUFBQSxFQUNwQztBQUVBLFFBQU0sV0FBVyxNQUFNLE1BQU0sS0FBSyxPQUFPO0FBRXpDLE1BQUksQ0FBQyxTQUFTLElBQUk7QUFDaEIsVUFBTSxlQUFlLE1BQU0sU0FBUyxLQUFLO0FBQ3pDLFVBQU0sSUFBSSxNQUFNLGdDQUFnQyxTQUFTLE1BQU0sTUFBTSxZQUFZLEVBQUU7QUFBQSxFQUNyRjtBQUVBLFNBQU8sU0FBUyxLQUFLO0FBQ3ZCO0FBR0EsZUFBZSxpQkFBaUIsWUFBWSxRQUFRO0FBQ2hELFFBQU0sV0FBVyxVQUFVLFVBQVUsSUFBSSxNQUFNO0FBQy9DLFNBQU8sY0FBYyxRQUFRO0FBQy9CO0FBR0YsZUFBZSxLQUFLLFNBQVM7QUFHM0IsUUFBTSxVQUFVLE1BQU0saUJBQWlCLFFBQVEsWUFBWSxRQUFRLEVBQUU7QUFDckUsUUFBTSxFQUFFLEtBQUssSUFBSSxRQUFRO0FBRXpCLE1BQUcsUUFBUSxjQUFjO0FBQVEsWUFBUSxLQUFLLE1BQU0sSUFBRyxnQ0FBOEI7QUFDckYsTUFBRyxRQUFRLGNBQWM7QUFBMEIsWUFBUSxLQUFLLE1BQU0sSUFBRyxxQ0FBbUM7QUFFNUcsVUFBUSxJQUFJLFFBQVEsSUFBSTtBQUN4QixLQUFHLGNBQWMsT0FBSyxTQUFTLEtBQUssVUFBVSxRQUFRLElBQUksQ0FBQztBQUUzRCxNQUFJO0FBRUEsVUFBTSxPQUFPLE1BQU0sT0FBTyxNQUFNLE9BQU87QUFBQSxNQUNuQyxNQUFNLEdBQUcsaUJBQWlCLE9BQUssT0FBTztBQUFBLE1BQ3RDLFNBQVM7QUFBQSxJQUNiLENBQUM7QUFHRCxVQUFNLGNBQWMsUUFBUSxJQUFJO0FBQ2hDLFVBQU0sa0JBQWtCLE1BQU0sT0FBTyxLQUFLLFdBQVcsTUFBTTtBQUFBLE1BQ3ZEO0FBQUEsTUFDQSxFQUFFLFNBQVMsS0FBSyxHQUFHO0FBQUEsSUFDdkI7QUFFQSxZQUFRLElBQUksMkJBQTJCLGVBQWU7QUFBQSxFQUMxRCxTQUFTLE9BQU87QUFDWixZQUFRLE1BQU0sVUFBVSxLQUFLO0FBQUEsRUFDakM7QUFDRjtBQUVBLElBQU8sa0RBQVEsT0FBTyxLQUFLLFlBQVk7QUFDbkMsUUFBTSxVQUFVLE1BQU0sSUFBSSxLQUFLO0FBQy9CLFFBQU0sS0FBSyxPQUFPO0FBQ3BCOyIsCiAgIm5hbWVzIjogW10KfQo=
